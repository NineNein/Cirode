#include <vector>

typedef std::vector< double > state_type;

/*
Generated by Cirode: https://github.com/NineNein/Cirode

Description of Circuit:
R1 0 1 1000.0
V1 1 0 1.0
R3 2 0 1000.0
R2 1 2 1000.0

*/

namespace static_circuit
{

    struct Components{
        double R1 = 1000.0;
        double V1 = 1.0;
        double R3 = 1000.0;
        double R2 = 1000.0;
            
    };



    
    struct Sources {
        double V1 = 1.0;
        
    };
    

    struct Quantities {
        double V_1;
        double V_2;
        double I_R1;
        double I_V1;
        double I_R3;
        double I_R2;
        
    };

    class static_circuit {

    public:

        Components components;

        static_circuit(Components components) : components(components) { }

        Quantities quantities(const Sources sources)
        {
            Quantities quants;
            quants.V_1 = sources.V1;
            quants.V_2 = this->components.R1*this->components.R3*sources.V1/(this->components.R1*this->components.R2 + this->components.R1*this->components.R3);
            quants.I_R1 = sources.V1/this->components.R1;
            quants.I_V1 = sources.V1*(this->components.R1 + this->components.R2 + this->components.R3)/(this->components.R1*this->components.R2 + this->components.R1*this->components.R3);
            quants.I_R3 = -this->components.R1*sources.V1/(this->components.R1*this->components.R2 + this->components.R1*this->components.R3);
            quants.I_R2 = -this->components.R1*sources.V1/(this->components.R1*this->components.R2 + this->components.R1*this->components.R3);
            
            return quants;
        }

        };

}